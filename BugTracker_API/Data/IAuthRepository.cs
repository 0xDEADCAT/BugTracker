////////////////////////////////////////////////////////////////////////////////////////////////////
/// <file>  BugTracker_API\Data\IAuthRepository.cs </file>
///
/// <copyright file="IAuthRepository.cs" company="Dawid Osuchowski">
/// Copyright (c) 2020 Dawid Osuchowski. All rights reserved.
/// </copyright>
///
/// <summary>   Declares the IAuthRepository interface. </summary>
////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Threading.Tasks;
using BugTracker_API.Models;

namespace BugTracker_API.Data
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   Interface for authentication repository. </summary>
    ///
    /// <remarks>   Dawid, 18/06/2020. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public interface IAuthRepository
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Registers this user. </summary>
        ///
        /// <param name="user">     The user. </param>
        /// <param name="password"> The password. </param>
        ///
        /// <returns>   An asynchronous result that yields an user id. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Task<int> Register(User user, string password);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Login. </summary>
        ///
        /// <param name="username"> The username. </param>
        /// <param name="password"> The password. </param>
        ///
        /// <returns>   An asynchronous result that yields a bearer token string. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Task<string> Login(string username, string password);

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Queries if a given user exists. </summary>
        ///
        /// <param name="username"> The username. </param>
        ///
        /// <returns>   An asynchronous result that yields true if it succeeds, false if it fails. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        Task<bool> UserExists(string username);
    }
}
